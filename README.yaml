---
#
# This is the canonical configuration for the `README.md`
# Run `make readme` to rebuild the `README.md`
#

# Name of this project
name: "Cloudfront S3 redirect Terraform module"

# Short description of this project
description: |-
  An AWS S3 & Cloudfront based solution to redirect domains in a serverless way

# Canonical GitHub repo
github_repo: osodevops/aws-terraform-module-cloudfront-s3-redirect

# How to use this project
usage: |-
  This module deploys and configures a S3 website behind a Cloudfront distribution, allowing you to do a serverless domain name redirect. In order to use this module we assume the following is present:

  * it runs HTTPS via Amazon's Certificate Manager ("ACM")
  * its domain is backed by a Route53 zone
  * and of course, your AWS account provides you access to all these resources necessary.

  This module is a pair with
  [aws-terraform-module-cloudfront](https://github.com/osodevops/aws-terraform-module-cloudfront),
  which handles hosting of a static S3 website with CloudFront and ACM.

  Include this repository as a module in your existing terraform code:
  ```hcl
    # AWS Region for S3 and other resources
    provider "aws" {
      region = "eu-west-2"
      alias = "main"
    }

    # AWS Region for Cloudfront (ACM certs only supports us-east-1)
    provider "aws" {
      region = "us-east-1"
      alias = "cloudfront"
    }

    # Variables
    variable "fqdn" {
      description = "The fully-qualified domain name root of the resulting S3 website."
      default     = "example.com"
    }

    variable "redirect_target" {
      description = "The fully-qualified domain name to redirect to."
      default     = "www.example.com"
    }
  ```

# Example usage
examples: |-
  ### Using this module
  ```hcl
    module "main" {
      source = "github.com/osodevops/aws-terraform-module-cloudfront-s3-redirect"

      fqdn = "${var.fqdn}"
      redirect_target = "${var.redirect_target}"
      ssl_certificate_arn = "${aws_acm_certificate_validation.cert.certificate_arn}"

      refer_secret = "${base64sha512("REFER-SECRET-19265125-${var.fqdn}-52865926")}"
      force_destroy = "true"
      priceclass = "PriceClass_200"

      providers = {
        aws.main = aws.main
        aws.cloudfront = aws.cloudfront
      }

      # Optional WAF Web ACL ID, defaults to none.
      web_acl_id = "${data.terraform_remote_state.site.waf-web-acl-id}"
    }

    # ACM Certificate generation

    resource "aws_acm_certificate" "cert" {
      provider          = "aws.cloudfront"
      domain_name       = "${var.fqdn}"
      validation_method = "DNS"
    }

    resource "aws_route53_record" "cert_validation" {
      provider = "aws.cloudfront"
      name     = "${aws_acm_certificate.cert.domain_validation_options.0.resource_record_name}"
      type     = "${aws_acm_certificate.cert.domain_validation_options.0.resource_record_type}"
      zone_id  = "${data.aws_route53_zone.main.id}"
      records  = ["${aws_acm_certificate.cert.domain_validation_options.0.resource_record_value}"]
      ttl      = 60
    }

    resource "aws_acm_certificate_validation" "cert" {
      provider                = "aws.cloudfront"
      certificate_arn         = "${aws_acm_certificate.cert.arn}"
      validation_record_fqdns = ["${aws_route53_record.cert_validation.fqdn}"]
    }

    # Route 53 record for the static site

    data "aws_route53_zone" "main" {
      provider     = "aws.main"
      name         = "${var.fqdn}"
      private_zone = false
    }

    resource "aws_route53_record" "web" {
      provider = "aws.main"
      zone_id  = "${data.aws_route53_zone.main.zone_id}"
      name     = "${var.fqdn}"
      type     = "A"

      alias {
        name    = "${module.main.cf_domain_name}"
        zone_id = "${module.main.cf_hosted_zone_id}"
        evaluate_target_health = false
      }
    }

    # Outputs

    output "s3_bucket_id" {
      value = "${module.main.s3_bucket_id}"
    }

    output "s3_domain" {
      value = "${module.main.s3_website_endpoint}"
    }

    output "s3_hosted_zone_id" {
      value = "${module.main.s3_hosted_zone_id}"
    }

    output "cloudfront_domain" {
      value = "${module.main.cf_domain_name}"
    }

    output "cloudfront_hosted_zone_id" {
      value = "${module.main.cf_hosted_zone_id}"
    }

    output "cloudfront_distribution_id" {
      value = "${module.main.cf_distribution_id}"
    }

    output "route53_fqdn" {
      value = "${aws_route53_record.web.fqdn}"
    }

    output "acm_certificate_arn" {
      value = "${aws_acm_certificate_validation.cert.certificate_arn}"
    }
  ```

### Inputs
  Example module inputs
  | Name | Description | Type | Default | Required |
  |------|-------------|:----:|:-----:|:-----:|
  | aws_region | Region used in AWS | string | n/a | yes |


related:
  - name: "CloudFront S3 Terraform module"
    description: "A terraform module for deploying Cloudfront backed by S3"
    url: "https://github.com/osodevops/aws-terraform-module-cloudfront-s3"
